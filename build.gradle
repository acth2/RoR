buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'

// Version configuration
def targetVersion = project.hasProperty('target_version') ? project.getProperty('target_version') : '1.16.5'

version = "1.0"
group = 'fr.acth2.ror'
archivesBaseName = "ror-${targetVersion}"

// Java version setup
java.toolchain.languageVersion = JavaLanguageVersion.of(
        targetVersion.startsWith('1.12') ? 8 :
                (targetVersion.startsWith('1.16') || targetVersion.startsWith('1.17')) ? 16 :
                        17
)

// Configure forge versions in gradle.properties
minecraft {
    mappings channel: 'official', version: targetVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                ror {
                    source sourceSets.main
                }
            }
            args '--username', 'DevPlayer'
            args '--uuid', '0'
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                ror {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${getForgeVersion(targetVersion)}"

    // Geckolib version handling
    if (targetVersion.startsWith('1.12')) {
        implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.12.2:2.0.0')
    } else if (targetVersion.startsWith('1.16')) {
        implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.57')
    } else if (targetVersion.startsWith('1.18')) {
        implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')
    } else if (targetVersion.startsWith('1.19')) {
        implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:4.0.3')
    } else if (targetVersion.startsWith('1.20')) {
        implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.20:4.2.3')
    }
}

String getForgeVersion(String mcVersion) {
    switch(mcVersion) {
        case '1.12.2': return '1.12.2-14.23.5.2860'
        case '1.16.5': return '1.16.5-36.2.34'
        case '1.18.2': return '1.18.2-40.1.0'
        case '1.19.2': return '1.19.2-43.2.0'
        case '1.20.1': return '1.20.1-47.1.0'
        default: throw new GradleException("Unsupported Minecraft version: ${mcVersion}")
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "ror",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}